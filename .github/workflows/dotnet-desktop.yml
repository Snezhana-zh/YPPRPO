name: .NET Core Desktop

on:
  push:
    branches: [ "master" ]
env:
  IMAGE_NAME: "snezhanazh/lagrange"
  
jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name == 'push' }}
          tags: |
            ${{ env.IMAGE_NAME }}:latest
            ${{ env.IMAGE_NAME }}:${{ github.sha }}
  release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - run: npm install

      - run: npm ci

      - run: npm run release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # build:

  #   strategy:
  #     matrix:
  #       configuration: [Debug, Release]

  #   runs-on: windows-latest  # For a list of available runner types, refer to
  #                            # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on

  #   env:
  #     Solution_Name: LagrangeInterpolation.sln                       # Replace with your solution name, i.e. MyWpfApp.sln.
  #     Test_Project_Path: LagrangeInterpolation.Tests\LagrangeInterpolation.Tests.csproj                 # Replace with the path to your test project, i.e. MyWpfApp.Tests\MyWpfApp.Tests.csproj.
  #     Wap_Project_Directory: LagrangeInterpolation.Package    # Replace with the Wap project directory relative to the solution, i.e. MyWpfApp.Package.
  #     Wap_Project_Path: LagrangeInterpolation.Package\LagrangeInterpolation.Package.wapproj                   # Replace with the path to your Wap project, i.e. MyWpf.App.Package\MyWpfApp.Package.wapproj.

  #   steps:
  #   - name: Checkout
  #     uses: actions/checkout@v4
  #     with:
  #       fetch-depth: 0

  #   # Install the .NET Core workload
  #   - name: Install .NET Core
  #     uses: actions/setup-dotnet@v4
  #     with:
  #       dotnet-version: 8.0.x

  #   # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
  #   - name: Setup MSBuild.exe
  #     uses: microsoft/setup-msbuild@v2

  #   # Execute all unit tests in the solution
  #   - name: Execute unit tests
  #     run: dotnet test --logger trx --results-directory "TestResults-${{ matrix.dotnet-version }}"

  #   # Restore the application to populate the obj folder with RuntimeIdentifiers
  #   - name: Restore the application
  #     run: msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Configuration
  #     env:
  #       Configuration: ${{ matrix.configuration }}

  #   # Upload the MSIX package: https://github.com/marketplace/actions/upload-a-build-artifact
  #   - name: Upload test results
  #     uses: actions/upload-artifact@v4
  #     with:
  #       name: Test Results
  #       path: TestResults-${{ matrix.dotnet-version }}
  #       overwrite: true
  #     if: ${{ always() }}

    # - name: Upload build artifacts
    #   uses: actions/upload-artifact@v4
    #   with:
    #     name: MSIX Package
    #     path: ${{ env.Wap_Project_Directory }}\AppPackages
