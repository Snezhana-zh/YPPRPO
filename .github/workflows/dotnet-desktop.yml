name: .NET Core Desktop

on:
  push:
    branches: [ "master" ]
env:
  IMAGE_NAME: "snezhanazh/lagrange"
  
jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name == 'push' }}
          tags: |
            ${{ env.IMAGE_NAME }}:latest
            ${{ env.IMAGE_NAME }}:${{ github.sha }}
  release:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Release
        uses: cycjimmy/semantic-release-action@v2
        with:
          semantic_version: 18.0.0
          extra_plugins: |
            @semantic-release/changelog@6.0.0
            @semantic-release/git@10.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  analyze:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
      - run: dotnet tool install --global dotnet-sonarscanner
      - run: dotnet sonarscanner begin \
              /key:Snezhana1213_YPPRPO \
              /d:sonar.host.url=https://sonarcloud.io \
              /d:sonar.login=${{ secrets.SONAR_TOKEN }} \
              /d:sonar.projectName=YPPRPO \
              /d:sonar.sourceEncoding=UTF-8 \
              /d:sonar.qualitygate.wait=true \
              /d:sonar.sources=. \
              /d:sonar.tests=./LagrangeInterpolation.Tests/ \
              /d:sonar.cs.opencover.reportsPaths=./reports/coverage.opencover.xml \
              /d:sonar.cs.xunit.reportPaths=./TestResults/*.xml \
              /d:sonar.exclusions=**/bin/**, **/obj/**


      - run: dotnet build
      - run: dotnet test --collect:"XPlat Code Coverage" --settings coverlet.runsettings
      - run: dotnet sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"